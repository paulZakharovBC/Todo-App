{"version":3,"sources":["components/TodoInput.js","components/EditItemInput.js","components/TodoItem.js","components/TodoList.js","components/DeletePopUp.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","props","className","onSubmit","handleSubmit","type","placeholder","value","item","onChange","handleChange","onClick","EditItemInput","handleItemEditSubmit","handleItemEdit","temporaryItemTitleWhileEditing","TodoItem","cls","clsForImportantBtn","clsForDoneBtn","itemIsDone","push","itemIsImportant","clsForEditingBtn","itemIsEditing","join","onToggleItemIsDone","title","onToggleItemIsImportant","toggleEditItem","deleteItemPopUp","TodoList","items","map","key","itemId","handleDelete","e","event","length","clearList","DeletePopUp","itemIdUserWantsToDelete","idx","cancelDeleting","App","state","id","editItem","userWantsToDeleteItem","setState","target","preventDefault","newItem","updatedItems","prevState","filteredItems","filter","findIndex","console","log","newArray","slice","selectedItem","find","path","exact","render","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed9a0856.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './TodoInput.css'\r\n\r\nconst TodoInput = (props) => {\r\n\r\n    return (\r\n        <div className='form'>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div className='inputing'>\r\n                    <input\r\n                        \r\n                        type='text' className='todo-input'\r\n                        placeholder='Add a Todo Item'\r\n                        value={props.item}\r\n                        onChange={props.handleChange} />\r\n                </div>\r\n\r\n                <div className='addItemBtn'\r\n                onClick={props.handleSubmit}>\r\n                    <a>\r\n                        Add item to the List\r\n                    </a>\r\n\r\n\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoInput\r\n\r\n","import React from 'react'\r\nimport './EditItemInput.css'\r\n\r\nconst EditItemInput = (props) => {\r\n    return (\r\n        <div className='BlackLayout'>\r\n            <div className=\"editQuestion\">\r\n                <h3>Please, edit item here:</h3>\r\n                <form\r\n                    className='editForm'\r\n                    onSubmit={props.handleItemEditSubmit}>\r\n                    <input className='editInput'\r\n                        placeholder=\"edit your item here\"\r\n                        onChange={props.handleItemEdit}\r\n                        value={props.temporaryItemTitleWhileEditing}\r\n                    />\r\n                </form>\r\n                <div className='editYesBtn'\r\n                    onClick={props.handleItemEditSubmit}>Confirm</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditItemInput","import React from 'react'\r\nimport EditItemInput from './EditItemInput'\r\nimport BlackBack from './BlackBack'\r\nimport './TodoItem.css'\r\n\r\n\r\nconst TodoItem = (props) => {\r\n    const cls = []\r\n    const clsForImportantBtn = ['icons imp-btn fas fa-bookmark']\r\n    const clsForDoneBtn = ['fas fa-check-circle doneBtn']\r\n\r\n    if (props.itemIsDone) {\r\n        cls.push('done')\r\n        clsForDoneBtn.push('doneBtnIsActive')\r\n    } else if (props.itemIsImportant) {\r\n        cls.push('important')\r\n        clsForImportantBtn.push(\"impBtnIsActive\")\r\n    }\r\n\r\n    const clsForEditingBtn = ['icons pen-btn fas fa-pen']\r\n    if (props.itemIsEditing) {\r\n        clsForEditingBtn.push('editBtnIsActive')\r\n    }\r\n\r\n    return (\r\n\r\n        <li className='itemList'>\r\n            {props.itemIsEditing ?\r\n\r\n                <EditItemInput\r\n\r\n                    handleItemEdit={props.handleItemEdit}\r\n                    temporaryItemTitleWhileEditing={props.temporaryItemTitleWhileEditing}\r\n                    handleItemEditSubmit={props.handleItemEditSubmit}\r\n                />\r\n\r\n                :\r\n                <div className='container'>\r\n                    <i className={clsForDoneBtn.join(' ')}\r\n                        onClick={props.onToggleItemIsDone} />\r\n                    <div className='flex-input'>\r\n                        <h6\r\n                            className={cls.join(' ')}\r\n                            onClick={props.onToggleItemIsDone}\r\n                        >{props.title}</h6>\r\n                        <div className='todoIcons'>\r\n\r\n                            <span\r\n                                onClick={props.onToggleItemIsImportant}>\r\n                                <i className={clsForImportantBtn.join(' ')}></i>\r\n                            </span>\r\n                            <span\r\n                                onClick={props.toggleEditItem}>\r\n                                <i className={clsForEditingBtn.join(' ')} />\r\n                            </span>\r\n                            <span\r\n                                onClick={props.deleteItemPopUp}\r\n                            >\r\n                                <i className='icons del-btn fas fa-trash' />\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n        </li>\r\n\r\n    )\r\n}\r\n\r\nexport default TodoItem","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport './TodoList.css'\r\n\r\nconst TodoList = (props) => {\r\n    return (\r\n        <ul>\r\n            <h1>Todo List</h1>\r\n\r\n            {props.items.map(item => {        \r\n                return (\r\n                    <TodoItem\r\n                        key={item.itemId}           \r\n                        title={item.title}\r\n                        itemIsEditing={item.itemIsEditing}\r\n                        itemIsDone={item.itemIsDone}\r\n                        itemIsImportant={item.itemIsImportant}\r\n                        handleDelete={() => props.handleDelete(item.itemId)} \r\n                        handleItemEditSubmit={(e) => props.handleItemEditSubmit(item.itemId, e)}\r\n                        toggleEditItem={() => props.toggleEditItem(item.itemId)}\r\n                        handleItemEdit={(event) => props.handleItemEdit(event)}\r\n                        onToggleItemIsDone={() => props.onToggleItemIsDone(item.itemId)}\r\n                        onToggleItemIsImportant={() => props.onToggleItemIsImportant(item.itemId)}\r\n                        temporaryItemTitleWhileEditing={props.temporaryItemTitleWhileEditing}\r\n\r\n                        deleteItemPopUp={() => props.deleteItemPopUp(item.itemId)}\r\n                    />\r\n\r\n                )\r\n            })}\r\n\r\n            {props.items.length > 0 ? <div className='clearBtn'\r\n            onClick={props.clearList} ><a>Clear the List</a></div> : null }\r\n\r\n\r\n\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList","import React from 'react'\r\nimport './DeletePopUp.css'\r\n\r\nconst DeletePopUp = (props) => {\r\n    return (\r\n        <div className='backDrop'>\r\n            <div className='deleteQuestion'>\r\n                <h3>Do you really want to delete '{props.itemIdUserWantsToDelete.title}' ?</h3>\r\n                <div className='questionBtns'>\r\n\r\n\r\n                    <div className='yesBtn'\r\n                     onClick={() => props.handleDelete(props.itemIdUserWantsToDelete.idx)}>Yes</div>\r\n\r\n                    <div className='noBtn'\r\n                    onClick={props.cancelDeleting}>No</div>\r\n                    \r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeletePopUp\r\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\nimport DeletePopUp from './components/DeletePopUp'\nimport './App.css'\n\n\nclass App extends Component {\n  state = {\n    items: [],\n    id: 0,\n    item: '',\n    editItem: false,\n    temporaryItemTitleWhileEditing: '',\n    userWantsToDeleteItem: false,\n    itemIdUserWantsToDelete: {}\n\n\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      item: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n\n    const newItem = {\n      itemId: this.state.id,\n      title: this.state.item,\n      itemIsImportant: false,\n      itemIsDone: false,\n      itemIsEditing: false,\n      \n    }\n\n    const updatedItems = [...this.state.items, newItem]\n    this.setState(prevState => ({\n      items: updatedItems,\n      item: '',\n      id: prevState.id + 1,\n      editItem: false\n    }))\n\n  }\n\n  clearList = () => {\n    this.setState({\n      items: []\n    })\n  }\n\n  handleDelete = (itemId) => {\n    const filteredItems = this.state.items.filter(item => item.itemId !== itemId)\n    this.setState(prevState => ({ \n      items: filteredItems,\n      userWantsToDeleteItem: !prevState.userWantsToDeleteItem,\n      itemIdUserWantsToDelete: {}\n\n    }))\n  }\n\n\n  toggleEditItem = (itemId) => {\n\n    const idx = this.state.items.findIndex(item => item.itemId === itemId)\n    console.log(idx)\n    const newItem = {\n      ...this.state.items[idx],\n      itemIsEditing: !this.state.items[idx].itemIsEditing\n    }\n    const newArray = [\n      ...this.state.items.slice(0, idx),\n      newItem,\n      ...this.state.items.slice(idx + 1)\n    ]\n    return (\n      this.setState(prevState => ({\n        items: newArray,\n        temporaryItemTitleWhileEditing: prevState.items[idx].title\n      }))\n    )\n  }\n\n  handleItemEdit = (event) => {\n    this.setState({\n      temporaryItemTitleWhileEditing: event.target.value\n    })\n  }\n\n  handleItemEditSubmit = (itemId, e) => {\n    e.preventDefault();\n\n    const idx = this.state.items.findIndex(item => item.itemId === itemId)\n\n    const newItem = {\n      ...this.state.items[idx],\n      title: this.state.temporaryItemTitleWhileEditing,\n      itemIsEditing: !this.state.items[idx].itemIsEditing\n\n    }\n    const newArray = [\n      ...this.state.items.slice(0, idx),\n      newItem,\n      ...this.state.items.slice(idx + 1)\n    ]\n    return (\n      this.setState({\n        items: newArray,\n        temporaryItemTitleWhileEditing: ''\n      })\n    )\n  }\n\n  onToggleItemIsDone = (itemId) => {\n    const idx = this.state.items.findIndex(item => item.itemId === itemId)\n    const newItem = {\n      ...this.state.items[idx],\n      itemIsDone: !this.state.items[idx].itemIsDone,\n      itemIsImportant: !this.state.items[idx].itemIsImportant\n\n    }\n    const newArray = [\n      ...this.state.items.slice(0, idx),\n      newItem,\n      ...this.state.items.slice(idx + 1)\n    ]\n    this.setState({\n      items: newArray\n    })\n  }\n\n  onToggleItemIsImportant = (itemId) => {\n    const idx = this.state.items.findIndex(item => item.itemId === itemId)\n    const newItem = {\n      ...this.state.items[idx],\n      itemIsImportant: !this.state.items[idx].itemIsImportant\n    }\n    const newArray = [\n      ...this.state.items.slice(0, idx),\n      newItem,\n      ...this.state.items.slice(idx + 1)\n\n    ]\n\n    this.setState({\n      items: newArray\n    })\n  }\n\n  deleteItemPopUp = (itemId) => {\n    const selectedItem = this.state.items.find(item => item.itemId === itemId)\n    const newItem = {\n      idx: selectedItem.itemId,\n      title: selectedItem.title\n    }\n    this.setState(prevState => ({\n      userWantsToDeleteItem: !prevState.userWantsToDeleteItem,\n      itemIdUserWantsToDelete: newItem\n\n    }))\n  }\n\n  cancelDeleting = () => {\n    this.setState(prevState => ({\n      userWantsToDeleteItem: !prevState.userWantsToDeleteItem\n\n    }))\n  }\n  render() {\n\n    return (\n      <Router>\n        <Switch>\n          <Route path='/Todo-App' exact render={() =>\n            <div className='app'>\n\n              {this.state.userWantsToDeleteItem ?\n                <DeletePopUp\n                  itemIdUserWantsToDelete={this.state.itemIdUserWantsToDelete}\n                  handleDelete={this.handleDelete}\n                  cancelDeleting={this.cancelDeleting} />\n                :\n                null}\n\n              <div className='input'>\n                <h1>My Todo List</h1>\n                <TodoInput\n\n                  item={this.state.item}\n                  handleChange={this.handleChange}\n                  handleSubmit={this.handleSubmit}\n                  editItem={this.state.editItem}\n                />\n              </div>\n\n              <TodoList\n                items={this.state.items}\n                temporaryItemTitleWhileEditing={this.state.temporaryItemTitleWhileEditing}\n                clearList={this.clearList}\n                handleDelete={this.handleDelete}\n                handleItemEdit={this.handleItemEdit}\n                handleItemEditSubmit={this.handleItemEditSubmit}\n                toggleEditItem={this.toggleEditItem}\n                onToggleItemIsDone={this.onToggleItemIsDone}\n                onToggleItemIsImportant={this.onToggleItemIsImportant}\n\n                deleteItemPopUp={this.deleteItemPopUp}\n\n              />\n            </div>} />\n\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'sanitize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}