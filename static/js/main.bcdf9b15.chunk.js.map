{"version":3,"sources":["components/TodoInput.js","components/EditItemInput.js","components/BlackBack.js","components/TodoItem.js","components/TodoList.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","props","className","onSubmit","handleSubmit","type","placeholder","value","item","onChange","handleChange","onClick","EditItemInput","handleItemEditSubmit","handleItemEdit","test","BlackBack","itemIdUserWantsToDelete","title","handleDelete","idx","cancelDeleting","TodoItem","cls","clsForImportantBtn","clsForDoneBtn","itemIsDone","push","itemIsImportant","clsForEditingBtn","itemIsEditing","join","onToggleItemIsDone","onToggleItemIsImportant","toggleEditItem","deleteItemPopUp","TodoList","items","map","key","itemId","e","event","clearList","Home","userWantsToDeleteItem","editItem","App","state","id","setState","target","preventDefault","newItem","temporaryItemTitle","updatedItems","prevState","filteredItems","filter","findIndex","console","log","newArray","slice","selectedItem","find","path","exact","render","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bcdf9b15.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './TodoInput.css'\r\n\r\nconst TodoInput = (props) => {\r\n\r\n    return (\r\n        <div className='form'>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div className='inputing'>\r\n                    <input\r\n                        \r\n                        type='text' className='todo-input'\r\n                        placeholder='Add a Todo Item'\r\n                        value={props.item}\r\n                        onChange={props.handleChange} />\r\n                </div>\r\n\r\n                <div className='addItemBtn'\r\n                onClick={props.handleSubmit}>\r\n                    <a>\r\n                        Add item to the List\r\n                    </a>\r\n\r\n\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoInput\r\n\r\n","import React from 'react'\r\nimport './EditItemInput.css'\r\n\r\n const EditItemInput = (props) => {\r\n    return (\r\n        <form \r\n        className='editForm'\r\n        onSubmit={props.handleItemEditSubmit}>\r\n            <input className='editInput'\r\n            placeholder=\"edit your item here\"\r\n                    onChange={props.handleItemEdit}\r\n                    value={props.test}\r\n             />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditItemInput","import React from 'react'\r\nimport './BlackBack.css'\r\n\r\nconst BlackBack = (props) => {\r\n    return (\r\n        <div className='backDrop'>\r\n            <div className='deleteQuestion'>\r\n                <h3>Do you really want to delete '{props.itemIdUserWantsToDelete.title}' ?</h3>\r\n                <div className='questionBtns'>\r\n\r\n\r\n                    <div className='yesBtn'\r\n                     onClick={() => props.handleDelete(props.itemIdUserWantsToDelete.idx)}>Yes</div>\r\n\r\n                    <div className='noBtn'\r\n                    onClick={props.cancelDeleting}>No</div>\r\n                    \r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlackBack\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// 1. Сделать зеленое выделение редактируемого элемента полностью зону item\r\n// 2. Сделать поп-ап при удалении предмета - спрашивает надо ли удалить предмет?\r\n// 3. Сделать галочку при выполнении задания\r\n// 4. Поменять восклицательный знак\r\n// 5. Сделать ограничение по количеству символов требуемых для инпута.    -------------- DONE","import React from 'react'\r\nimport EditItemInput from './EditItemInput'\r\nimport BlackBack from './BlackBack'\r\nimport './TodoItem.css'\r\n\r\n\r\nconst TodoItem = (props) => {\r\n    const cls = []\r\n    const clsForImportantBtn = ['icons imp-btn fas fa-bookmark']\r\n    const clsForDoneBtn = ['fas fa-check-circle doneBtn']\r\n\r\n    if (props.itemIsDone) {\r\n        cls.push('done')\r\n        clsForDoneBtn.push('doneBtnIsActive')\r\n    } else if (props.itemIsImportant) {\r\n        cls.push('important')\r\n        clsForImportantBtn.push(\"impBtnIsActive\")\r\n    }\r\n\r\n    const clsForEditingBtn = ['icons pen-btn fas fa-pen']\r\n    if (props.itemIsEditing) {\r\n        clsForEditingBtn.push('editBtnIsActive')\r\n    }\r\n\r\n    return (\r\n\r\n        <li className='itemList'>\r\n            {props.itemIsEditing ?\r\n\r\n                <EditItemInput\r\n\r\n                    handleItemEdit={props.handleItemEdit}\r\n                    test={props.test}\r\n                    handleItemEditSubmit={props.handleItemEditSubmit}\r\n                />\r\n\r\n                :\r\n                <div className='container'>\r\n                    <i className={clsForDoneBtn.join(' ')}\r\n                        onClick={props.onToggleItemIsDone} />\r\n                    <div className='flex-input'>\r\n                        <h6\r\n                            className={cls.join(' ')}\r\n                            onClick={props.onToggleItemIsDone}\r\n                        >{props.title}</h6>\r\n                        <div className='todoIcons'>\r\n\r\n                            <span\r\n                                onClick={props.onToggleItemIsImportant}>\r\n                                <i className={clsForImportantBtn.join(' ')}></i>\r\n                            </span>\r\n                            <span\r\n                                onClick={props.toggleEditItem}>\r\n                                <i className={clsForEditingBtn.join(' ')} />\r\n                            </span>\r\n                            <span\r\n                                onClick={props.deleteItemPopUp}\r\n                            >\r\n                                <i className='icons del-btn fas fa-trash' />\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n        </li>\r\n\r\n    )\r\n}\r\n\r\nexport default TodoItem","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport './TodoList.css'\r\n\r\nconst TodoList = (props) => {\r\n    return (\r\n        <ul>\r\n            <h1>Todo List</h1>\r\n\r\n            {props.items.map(item => {         // Разбиваем ареей и превращаем каждый её объект в отдельный TodoItem, что прописан в соседнем компоненте\r\n                return (\r\n                    <TodoItem\r\n                        key={item.itemId}             // Передаём новому компоненту два пропса - id и title, которые содержаться в каждом объекте array которую мы разбили\r\n                        title={item.title}\r\n                        itemIsEditing={item.itemIsEditing}\r\n                        itemIsDone={item.itemIsDone}\r\n                        itemIsImportant={item.itemIsImportant}\r\n                        handleDelete={() => props.handleDelete(item.itemId)} //Для того что бы заработало удаление надо что бы функция получила ID того элемента который надо удалить.\r\n                        handleItemEditSubmit={(e) => props.handleItemEditSubmit(item.itemId, e)}\r\n                        toggleEditItem={() => props.toggleEditItem(item.itemId)}\r\n                        handleItemEdit={(event) => props.handleItemEdit(event)}\r\n                        onToggleItemIsDone={() => props.onToggleItemIsDone(item.itemId)}\r\n                        onToggleItemIsImportant={() => props.onToggleItemIsImportant(item.itemId)}\r\n                        test={props.test}\r\n\r\n                        deleteItemPopUp={() => props.deleteItemPopUp(item.itemId)}\r\n                    />\r\n\r\n                )\r\n            })}\r\n\r\n\r\n\r\n            <div className='clearBtn'\r\n            onClick={props.clearList} ><a>Clear the List</a></div>\r\n\r\n\r\n\r\n            {/* <button\r\n                className='btn'\r\n                type='button'\r\n                onClick={props.clearList} >\r\n                Clear the List\r\n            </button> */}\r\n\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList","import React from 'react'\r\nimport TodoInput from './components/TodoInput';\r\nimport TodoList from './components/TodoList';\r\nimport BlackBack from './components/BlackBack'\r\n\r\nexport default function Home(props) {\r\n    return (\r\n        <div className='app'>\r\n\r\n             {props.userWantsToDeleteItem ?\r\n              <BlackBack\r\n                itemIdUserWantsToDelete={props.itemIdUserWantsToDelete}\r\n                handleDelete={props.handleDelete}\r\n                cancelDeleting={props.cancelDeleting} />\r\n              :\r\n              null}\r\n\r\n            <div className='input'>\r\n              <h1>My Todo List</h1>\r\n              <TodoInput\r\n\r\n                item={props.item}\r\n                handleChange={props.handleChange}\r\n                handleSubmit={props.handleSubmit}\r\n                editItem={props.editItem}\r\n              />\r\n            </div>\r\n\r\n            <TodoList\r\n              items={props.items}\r\n              test={props.test}\r\n              clearList={props.clearList}\r\n              handleDelete={props.handleDelete}\r\n              handleItemEdit={props.handleItemEdit}\r\n              handleItemEditSubmit={props.handleItemEditSubmit}\r\n              toggleEditItem={props.toggleEditItem}\r\n              onToggleItemIsDone={props.onToggleItemIsDone}\r\n              onToggleItemIsImportant={props.onToggleItemIsImportant}\r\n\r\n              deleteItemPopUp={props.deleteItemPopUp}\r\n\r\n            />\r\n          </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\nimport BlackBack from './components/BlackBack'\nimport Home from './Home'\nimport './App.css'\n\n\nclass App extends Component {\n  state = {\n    items: [],\n    id: 0,\n    item: '',\n    editItem: false,\n    test: '',\n    userWantsToDeleteItem: false,\n    itemIdUserWantsToDelete: {}\n\n\n  }\n\n  handleChange = (event) => {          // То что пишем в инпуте - записываем в стейт item\n    this.setState({\n      item: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {           // По нажатию кнопки сабмит\n    event.preventDefault();             // ОТменяем обновление страницы\n\n\n    const newItem = {                   // Создаем новую константу NewItem\n      itemId: this.state.id,                // Записываем в неё айди\n      title: this.state.item,             // и значение Title которое вравно item которое раньше передали через инпут\n      itemIsImportant: false,\n      itemIsDone: false,\n      itemIsEditing: false,\n      temporaryItemTitle: this.state.item\n    }\n\n    const updatedItems = [...this.state.items, newItem]        //Нам нельзя мутировать текущий стейт, надо заменить его на новый с обновленными данными. ДЛя этого создаем новый массим со старыми данными\n    this.setState(prevState => ({\n      items: updatedItems,\n      item: '',\n      id: prevState.id + 1,\n      editItem: false\n    }))\n\n  }\n\n  clearList = () => {\n    this.setState({\n      items: []\n    })\n  }\n\n  handleDelete = (itemId) => {\n    const filteredItems = this.state.items.filter(item => item.itemId !== itemId) //Создаем новый маассив равный массиву из стейта но после фильтрации. В фильтре мы указываем что надо\n    // Оставить только те item которые не содержат id равный тому что мы получили на входе в функцию\n    this.setState({\n      items: filteredItems,\n      userWantsToDeleteItem: !this.state.userWantsToDeleteItem,\n      itemIdUserWantsToDelete: {}\n\n    })\n  }\n\n  toggleEditItem = (itemId) => {\n\n    const idx = this.state.items.findIndex(item => item.itemId === itemId)\n    console.log(idx)\n    const newItem = {\n      ...this.state.items[idx],\n      itemIsEditing: !this.state.items[idx].itemIsEditing\n    }\n    console.log(newItem)\n    const newArray = [\n      ...this.state.items.slice(0, idx),\n      newItem,\n      ...this.state.items.slice(idx + 1)\n    ]\n    return (\n      this.setState({\n        items: newArray,\n        test: this.state.items[idx].title\n      })\n    )\n  }\n\n  handleItemEdit = (event) => {\n    this.setState({\n      test: event.target.value\n    })\n  }\n\n  handleItemEditSubmit = (itemId, e) => {\n    e.preventDefault();\n\n    const idx = this.state.items.findIndex(item => item.itemId === itemId)\n\n    const newItem = {\n      ...this.state.items[idx],\n      title: this.state.test,\n      itemIsEditing: !this.state.items[idx].itemIsEditing\n\n    }\n    const newArray = [\n      ...this.state.items.slice(0, idx),\n      newItem,\n      ...this.state.items.slice(idx + 1)\n    ]\n    return (\n      this.setState({\n        items: newArray,\n        test: ''\n      })\n    )\n  }\n\n  onToggleItemIsDone = (itemId) => {\n    const idx = this.state.items.findIndex(item => item.itemId === itemId)\n    const newItem = {\n      ...this.state.items[idx],\n      itemIsDone: !this.state.items[idx].itemIsDone,\n      itemIsImportant: !this.state.items[idx].itemIsImportant\n\n    }\n    const newArray = [\n      ...this.state.items.slice(0, idx),\n      newItem,\n      ...this.state.items.slice(idx + 1)\n    ]\n    this.setState({\n      items: newArray\n    })\n  }\n\n  onToggleItemIsImportant = (itemId) => {\n    const idx = this.state.items.findIndex(item => item.itemId === itemId)\n    const newItem = {\n      ...this.state.items[idx],\n      itemIsImportant: !this.state.items[idx].itemIsImportant\n    }\n    const newArray = [\n      ...this.state.items.slice(0, idx),\n      newItem,\n      ...this.state.items.slice(idx + 1)\n\n    ]\n\n    this.setState({\n      items: newArray\n    })\n  }\n\n  deleteItemPopUp = (itemId) => {\n    const selectedItem = this.state.items.find(item => item.itemId === itemId)\n    const newItem = {\n      idx: selectedItem.itemId,\n      title: selectedItem.title\n    }\n    this.setState(prevState => ({\n      userWantsToDeleteItem: !prevState.userWantsToDeleteItem,\n      itemIdUserWantsToDelete: newItem\n\n    }))\n  }\n\n  cancelDeleting = () => {\n    this.setState(prevState => ({\n      userWantsToDeleteItem: !prevState.userWantsToDeleteItem\n\n    }))\n  }\n  render() {\n\n    return (\n      <Router>\n        <Switch>\n          <Route path='/Todo-App' exact render={() => <Home\n            userWantsToDeleteItem={this.state.userWantsToDeleteItem}\n            itemIdUserWantsToDelete={this.state.itemIdUserWantsToDelete}\n            handleDelete={this.handleDelete}\n            cancelDeleting={this.cancelDeleting}\n\n            item={this.state.item}\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n            editItem={this.state.editItem}\n            items={this.state.items}\n            test={this.state.test}\n            clearList={this.clearList}\n            handleDelete={this.handleDelete}\n            handleItemEdit={this.handleItemEdit}\n            handleItemEditSubmit={this.handleItemEditSubmit}\n            toggleEditItem={this.toggleEditItem}\n            onToggleItemIsDone={this.onToggleItemIsDone}\n            onToggleItemIsImportant={this.onToggleItemIsImportant}\n\n            deleteItemPopUp={this.deleteItemPopUp}\n\n          />\n          } />\n\n          {/* <div className='app'>\n\n             {this.state.userWantsToDeleteItem ?\n              <BlackBack\n                itemIdUserWantsToDelete={this.state.itemIdUserWantsToDelete}\n                handleDelete={this.handleDelete}\n                cancelDeleting={this.cancelDeleting} />\n              :\n              null}\n\n            <div className='input'>\n              <h1>My Todo List</h1>\n              <TodoInput\n\n                item={this.state.item}\n                handleChange={this.handleChange}\n                handleSubmit={this.handleSubmit}\n                editItem={this.state.editItem}\n              />\n            </div>\n\n            <TodoList\n              items={this.state.items}\n              test={this.state.test}\n              clearList={this.clearList}\n              handleDelete={this.handleDelete}\n              handleItemEdit={this.handleItemEdit}\n              handleItemEditSubmit={this.handleItemEditSubmit}\n              toggleEditItem={this.toggleEditItem}\n              onToggleItemIsDone={this.onToggleItemIsDone}\n              onToggleItemIsImportant={this.onToggleItemIsImportant}\n\n              deleteItemPopUp={this.deleteItemPopUp}\n\n            />\n          </div> */}\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'sanitize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}